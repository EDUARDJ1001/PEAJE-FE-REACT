"use client";

import Header from "@/app/components/header";
import React, { useEffect, useState } from "react";

interface Empleado {
  nombre: string;
  apellido: string;
  loginTime: string;
  Id: number;
}

interface Boleto {
  Descripcion: string;
  Valor: number;
  Reporte_Venta_Id: number; // Asegúrate de que el reporte de venta esté presente en los boletos
}

const DashboardEmpleados: React.FC = () => {
  const [buttonData, setButtonData] = useState<Boleto[]>([]);
  const [empleadoData, setEmpleadoData] = useState<Empleado | null>(null);
  const apiHost = process.env.NEXT_PUBLIC_API_HOST;

  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      const parsedUser = JSON.parse(storedUser);
      const parsedDate = new Date(parsedUser.loginTime);
      const formattedLoginTime = parsedDate instanceof Date && !isNaN(parsedDate.getTime())
        ? parsedDate.toLocaleString()
        : "Fecha no disponible";
      setEmpleadoData({ ...parsedUser, formattedLoginTime });
    }

    const fetchButtonData = async () => {
      try {
        const response = await fetch(`${apiHost}/api/valor-boletos`);
        const data = await response.json();
        if (Array.isArray(data)) {
          setButtonData(data);
        } else {
          console.error("La respuesta no es un arreglo:", data);
          setButtonData([]);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setButtonData([]);
      }
    };

    fetchButtonData();
  }, [apiHost]);

  const imprimirTicket = async (boleto: Boleto) => {
    const storedUser = localStorage.getItem("user");
    if (!storedUser) {
      console.error("No hay usuario logueado");
      return;
    }

    const user = JSON.parse(storedUser);
    const userId = user.id; 

    try {
      // Obtener el último ticket emitido para el usuario
      const response = await fetch(`/api/tickets/last/${userId}`);
      const lastTicketData = await response.json();

      // Generar el nuevo número de ticket
      const ticketNumber = lastTicketData?.ticketNumber
        ? parseInt(lastTicketData.ticketNumber.replace(/^T(\d+)/, "$1")) + 1
        : 1; // Si no hay tickets previos, empezamos desde 1

      // Contenido del ticket
      const ticketContent = `
        <html>
          <head>
            <title>Ticket</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; margin: 0; padding: 8px; }
              .ticket { width: 100%; padding: 12px; margin-bottom: 10px; }
              .ticket h1 { font-size: 10px; margin: 0; }
              .ticket h2 { font-size: 6px; margin: 1px; }
              .ticket p { font-size: 6px; margin: 1px 0; }
            </style>
          </head>
          <body>
            <div class="ticket">
              <h1>Municipalidad de Puerto Cortés</h1>
              <h2>RTN 03019000044953</h2>
              <p>Estacion: PUERTO CORTES</p>
              <p>Ticket No. ${ticketNumber}</p>
              <p>Fecha: ${new Date().toLocaleString()}</p>
              <p>Vehiculo: ${boleto.Descripcion}</p>
              <p>-------------------------</p>
              <p>Total: L. ${isNaN(Number(boleto.Valor)) ? "0.00" : Number(boleto.Valor).toFixed(2)}</p>
              <p>Contribucion por mejoras</p>
            </div>
          </body>
        </html>
      `;

      // Imprimir el ticket
      const printWindow = window.open("", "", "width=600,height=600");
      if (printWindow) {
        printWindow.document.write(ticketContent);
        printWindow.document.close();
        printWindow.print();

        // Guardar el ticket en la base de datos
        await fetch(`/api/tickets`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: userId,
            ticketNumber: `T${ticketNumber}`,
            reporteVentaId: boleto.Reporte_Venta_Id // Aquí pasas el reporte de venta
          }),
        });

        // Cerrar la ventana después de la impresión
        setTimeout(() => {
          printWindow.close();
        }, 3000);
      }
    } catch (error) {
      console.error("Error al imprimir el ticket:", error);
    }
  };

  return (
    <div>
      <Header />
      <div className="p-4">
        {empleadoData ? (
          <div className="mb-4 text-gray-700">
            <p>
              Bienvenido, <strong>{empleadoData.nombre} {empleadoData.apellido}</strong>
            </p>
            <p>Sesión iniciada: {new Date(empleadoData.loginTime).toLocaleString()}</p>
          </div>
        ) : (
          <p className="text-gray-500">Cargando información del usuario...</p>
        )}
      </div>
      <div className="h-screen w-full overflow-y-auto bg-gray-50">
        <div className="grid grid-cols-2 gap-4 p-4">
          {Array.isArray(buttonData) && buttonData.length > 0 ? (
            buttonData.map((item, index) => (
              <div
                key={index}
                className="flex flex-col items-center justify-center bg-white rounded-lg shadow-md p-2"
              >
                <div className="w-24 h-24 bg-gray-200 rounded-md mb-2">
                  <img src="/img/2_ejes.png" alt="Imagen 2 Ejes" className="w-full h-full object-cover rounded-md" />
                </div>
                <p className="text-black">
                  {item.Descripcion ? item.Descripcion : "N/A"}
                </p>
                <button
                  onClick={() => imprimirTicket(item)}
                  className="w-24 h-12 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-md"
                >
                  {item.Valor !== undefined && item.Valor !== null && !isNaN(Number(item.Valor))
                    ? `L. ${Number(item.Valor).toFixed(2)}`
                    : "N/A"}
                </button>
              </div>
            ))
          ) : (
            <p className="text-center text-gray-500">No hay datos disponibles</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default DashboardEmpleados;

const ticketNumber = ticketCounter.toString().padStart(10, "0");

    const ticketContent = `
      <html>
      <head>
          <title>Ticket</title>
          <style>
              body {
                  font-family: Arial, sans-serif;
                  text-align: center;
                  margin: 0;
                  padding: 8px;
              }
              .ticket {
                  width: 100%;
                  padding: 12px;
                  margin-bottom: 10px;
              }
              .ticket h1 {
                  font-size: 10px;
                  margin: 0;
              }
              .ticket h2 {
                  font-size: 6px;
                  margin: 1px;
              }
              .ticket p {
                  font-size: 6px;
                  margin: 1px 0;
              }
              .qr-code {
                  margin-top: 1px;
              }
          </style>
      </head>
      <body>
          <div class="ticket">
              <h1>Municipalidad de Puerto Cortés</h1>
              <h2>RTN 03019000044953 </h2>
              <p>Estacion: PUERTO CORTES</p>
              <p>Ticket No. ${ticketNumber}</p>
              <p>Fecha: ${new Date().toLocaleString()}</p>
              <p>Vehiculo: ${boleto.Descripcion}</p>
              <p>-------------------------</p>
              <p>Total: L. ${isNaN(Number(boleto.Valor)) ? "0.00" : Number(boleto.Valor).toFixed(2)}</p>
              <p>Contribucion por mejoras<p>
          </div>
      </body>
      </html>
      `;

    const printWindow = window.open("", "", "width=600,height=600");
    if (printWindow) {
      printWindow.document.write(ticketContent);
      printWindow.document.close();
      printWindow.print();

      setTimeout(() => {
        printWindow.close();
      }, 3000);

      setTicketCounter((prevCounter) => prevCounter + 1);
    }